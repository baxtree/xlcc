/~eXtended Lightweight Coordination Calculus (XLCC) Interpreter on node.js ~/

[*
// FOR NODEJS ONLY >>>>>>>>>>>
	
	var sys = require("sys");
	var http = require("http");
	var url = require("url");
	var events = require("events");
	var xmpp = require("../lib/node-xmpp/lib/node-xmpp");
	
// FOR NODEJS ONLY <<<<<<<<<<<

	var constraints = {};
	var v_names = new Array();
	var v_values = new Array();
	var backtrack = undefined;
	var okcs = new Array();
//	var clauses = new Array();
	var role_heads = new Array();
	var role_bodies = new Array();
	var init = undefined;
	var currentMessageNode = undefined;
	var currentRoleNode = undefined;
	var currentConstraintsNode = undefined;
	var nextThenNode = undefined;
	var nextOrNode = undefined;
	var peerFullID = undefined;
	var peerPassword = undefined;
	var client = undefined;
	var xmpp_resource = undefined;
	var lastest_offline_msg = undefined;
	var niob_counter = undefined;
	var emitter = new events.EventEmitter;
	emitter.removeAllListeners("okcs loaded");
	emitter.removeAllListeners("gotMessageFromXMPPServer");
	emitter.on("gotMessageFromXMPPServer", onMessageArrival);
	
	var test_begin = undefined;
	var test_end = undefined;
	
	var NODE_OP			= 1;
	var NODE_VAR 		= 2;
	var NODE_CONST		= 3;
	var NODE_ARR		= 4;
	
	var OP_ENTRY		= -2;
	var OP_NONE 		= -1;
	var OP_SEND 		= 0;
	var OP_RECEIVE		= 1;
	var OP_THEN			= 2;
	var OP_OR			= 3;
	var OP_LIST 		= 4;
	var OP_ROLE			= 5;
	var OP_ROLE_DEF		= 6;
	var OP_SEND 		= 7;
	var OP_RECEIVE		= 8;
	var OP_ROLE_TYPE    = 9;
	var OP_SET_VAR      = 10;
	var OP_CONSTRAINT	= 11;
	var OP_NEGATE		= 12;
	var OP_LOGAND		= 13;
	var OP_LOGOR		= 14;
	var OP_NO_MSG		= 15;
	var OP_TERMS		= 16;
	var OP_FACTOR		= 17;
	var OP_MESSAGE		= 18;
	var OP_HEADBODY		= 19;
	var OP_ROLE_CHANGE  = 20;
	var OP_PAR			= 21;
	var OP_KNOWS		= 22;
	var OP_PLAYS		= 23;
	var OP_IID			= 24;
	var OP_CLAUSE		= 25;
	var OP_NIOB			= 26;
	var OP_BRACKET		= 27;
	var OP_BRACKET_OR	= 28;
	var OP_EQU			= 29;
	var OP_NEQ			= 30;
	var OP_GRT			= 31;
	var OP_LOT			= 32;
	var OP_GRE			= 33;
	var OP_LOE			= 34;
	var OP_ASSIGN		= 35;

/*  previous user input reader

	process.stdin.resume();
	read_string = function(){
		var stdIn = {
			start : "",
			data : ""
		};
		process.stdin.resume();
		process.stdin.removeAllListeners();
		process.stdin.setEncoding("utf8");
		process.stdin.on("data", function (chunk) {
			stdIn.start = chunk;
			process.stdout.write("You just inputed : " + chunk);
			process.stdin.resume(); });
//		while(stdIn.start==""){};
		process.stdin.pause();
		var data = stdIn.start;
		stdIn.start = "";
//		sys.debug("before return");
		return data;
	};
	process.stdin.pause();
*/
	
	var read_string_exec = false, read_string_node = false;
  	
	var read_string = function(fn){
//		sys.debug("inside the read_string function");
		process.stdin.resume();
		process.stdin.setEncoding('utf8');
		process.stdin.on('data', function (chunk) {
		 	fn(chunk);
		 	process.stdin.pause();
		});
	};
	
	function Node(){
		var type;
		var value;
		var children;
	} 
		
	function createNode(type, value, childs){
		var n = new Node();
		n.type = type;
		n.value = value;
		n.children = new Array();
		
		for(var i = 2; i < arguments.length; i++){
			n.children.push(arguments[i]);
		}
		return n;
	}
	
	function setValue(vname, vvalue){
		var found = false;
		for(var i = 0; i < v_names.length; i++){
			if(v_names[i].toString() == vname.toString()){
				v_values[i] = (arguments.length == 1)? undefined : vvalue; //The type is now checked here.
				found = true;
				break;
			}
			
		}
		if(!found){
			v_names.push(vname);
			v_values.push((arguments.length == 1)? undefined : vvalue);
		}
	}
	
	function getValue(vname){
		for(var i = 0; i < v_names.length; i++){
			if(v_names[i].toString() == vname.toString()){
				return v_values[i];
			}
		}
		return undefined;
	}

	function prepareVariableList(factors){
		var variable_list = [];
		if(factors.length != 0){
			for(var i = 0; i < factors.length; i++){
				if(factors[i].name && factors[i].name.charAt(0) === factors[i].name.charAt(0).toUpperCase()){
					if(!factors[i].value || factors[i].value == undefined || factors[i].value == "undefined" ){
						variable_list.push(factors[i].name);
					}
				}
				if(factors[i].params && factors[i].params.length != 0){
					variable_list = variable_list.concat(prepareVariableList(factors[i].params));
				}
			}
		}
		return variable_list;
	}
	
	function getUndefinedList(factors){
		return prepareVariableList(factors);
	}
	
	function setUndefinedList(variable_list, value_list){
		if(variable_list.length == value_list.length){
			for(var i = 0; i < variable_list.length; i++){
				setValue(variable_list[i], value_list[i]);
			}
			return true;
		}
		else{
			return false;
		}
	}


/*	commented out due to the do-not-blocking-the-event-loop requirement by node.js
*/
	function buildVariableList(variable_list, loop_counter, callback){
		if(variable_list.length != 0){
			process.stdin.resume();
			process.stdout.write("Please assign a new value to variable '" + variable_list[loop_counter] + "':");
			process.stdin.setEncoding("utf8");
			
			process.stdin.once("data", function (fvalue) {
				fvalue = fvalue.toString().trim();
				setValue(variable_list[loop_counter], fvalue);
			});
			process.stdin.on("end", function () {
				loop_counter++;
				if(loop_counter == variable_list.length){
					callback();
				}
				else{
					buildVariableList(variable_list, loop_counter, callback);
				}
			});
		}
	}

	
/*	commented out due to the do-not-blocking-the-event-loop requirement by node.js

	function buildVariableList(variable_list, callback){
		if(variable_list.length != 0){
			prompt.start();
//			prompt.get(variable_list, function(err, result){
			prompt.get(["A", "B", "C"], function(err, result){
//				sys.debug(JSON.stringify(result));
				callback();
			});
		}
	}
*/
	
/*  commented out due to the do-not-blocking-the-event-loop requirement by node.js
*/
	function readValueAsync(factors, callback1){
		var variable_list = prepareVariableList(factors);
		buildVariableList(variable_list, 0, function(){
			process.exit();
			callback1();		
		});
	}


	function readValue(factors){
		if(factors.length != 0){
			for(var i = 0; i < factors.length; i++){
				if(factors[i].name && factors[i].name.charAt(0) === factors[i].name.charAt(0).toUpperCase()){
					if(!factors[i].value || factors[i].value == undefined || factors[i].value == "undefined" ){
						reading_string_exec = true;
//						sys.debug("Please assign a new value to variable '" + factors[i].name + "(" + factors[i].value + ")':");
//						var fvalue = read_string();
						read_string(function(val){if(i == factors.length && !(factors[i].params && factors[i].params.length != 0)) reading_string_exec = false; factors[i].value = val; setValue(factors[i].name, val);});
//						factors[i].value = fvalue;
//						setValue(factors[i].name, fvalue);
					}
				}
				if(factors[i].params && factors[i].params.length != 0){
					readValue(factors[i].params);
				}
			}
		}
	}

	
	function serialiseValue(factors){
		var content = "";
		for(var i = 0; i < factors.length; i++){
//			sys.debug(factors[i].name.charAt(0).toString() + " : " + factors[i].name.charAt(0).toString().toUpperCase());
			if(factors[i].name && factors[i].name.charAt(0).toString() == factors[i].name.charAt(0).toString().toUpperCase()){
				if(factors[i].value == undefined){
//					sys.debug("here again");
				}
				else{
//					sys.debug(JSON.stringify(factors[i]));
//					sys.debug("detect factors " + factors[i].name + " " + factors[i].value);
					content += factors[i].name + " : " + factors[i].value + "\r\n";
					
				}
			}
			if(factors[i].params && factors[i].params.length != 0){
				content += serialiseValue(factors[i].params);
			}
		}
		return content;
	}
	
	function displayValue(factors){
		sys.debug(serialiseValue(factors));
	}
	
	function print(str){
		sys.print(str);
	}
	
	function println(str){
		sys.puts(str);
	}
	
	var peerHelper = { 
		"setValue" : setValue, 
		"getValue" : getValue,
		"readValue" : readValue,	  // commented out due to the do-not-blocking-the-event-loop requirement by node.js
		"readValueAsync" : readValueAsync,
		"setUndefinedList" : setUndefinedList,
		"getUndefinedList" : getUndefinedList, 		
		"print" : print,
		"println" : println,
		"displayValue" : displayValue
	}
	
	function resetLCCEnvironment(){
		v_names = new Array();
		v_values = new Array();
		backtrack = undefined;
		okcs = new Array();
		clauses = new Array();
		role_heads = new Array();
		role_bodies = new Array();
		init = undefined;
		currentMessageNode = undefined;
		currentRoleNode = undefined;
		currentConstraintsNode = undefined;
		nextThenNode = undefined;
		nextOrNode = undefined;
		niob_counter = undefined;
	}
	
	function isIdenticalRole(tnode1, tnode2, recursion_counter){ //TODO need testing
//		sys.debug(recursion_counter + " : "+ JSON.stringify(tnode1) + " " + JSON.stringify(tnode2));
		if(typeof(tnode1) == "string" && typeof(tnode2) == "string"){
			if(recursion_counter < 4){
				if(tnode1 == tnode2){
					return true;
				}
				else{
					return false;
				}
			}
			else{
				return true;
			}	
		}
		else if(typeof(tnode1) == "string" && typeof(tnode2) != "string" || typeof(tnode1) != "string" && typeof(tnode2) == "string"){
			return false;
		}
		else{
			recursion_counter++;
			if((tnode1.type == 1 && tnode1.type.toString() == tnode2.type.toString() && tnode1.value.toString() == tnode2.value.toString())
			|| (tnode1.type != 1 && tnode1.type.toString() == tnode2.type.toString())){
				if(tnode1.children.length == 0 && tnode2.children.length == 0){
						return true;
				}
				else if(tnode1.children.length == tnode2.children.length){
					for(var i = 0; i < tnode1.children.length; i++){
						if(isIdenticalRole(tnode1.children[i], tnode2.children[i], recursion_counter)){
							continue;
						}
						else{
//							sys.debug("detect false here");
							return false;
						}
					}
					return true;
				}
				else{
//					sys.debug("different children lengths");
					return false;
				}
			}
			else{
//				sys.debug("different types or values");
				return false;
			}
		}
	}

	
	function updateVariableValueInNode(src_role_head, dest_role_head){
		if(typeof(src_role_head) == "string" && typeof(dest_role_head) == "string"){
			if(getValue(src_role_head)){
				setValue(dest_role_head, getValue(src_role_head));
			}
			else{
				setValue(dest_role_head, src_role_head);
			}
		}
		else{
			for(var i = 0; i < src_role_head.children.length; i++){
				updateVariableValueInNode(src_role_head.children[i], dest_role_head.children[i]);
			}
		}
	}
	
	function getRoleBodyByRoleHead(role_head){
		var role_body = null;
		for(var i = 0; i < role_heads.length; i++){
			if(isIdenticalRole(role_head, role_heads[i], 0)){
				role_body = role_bodies[i];
				break;
			}
		}
		if(role_body == null){
			throw roleDefinitionNotFoundException(JSON.stringify(role_head));
		}
		else{
//			sys.debug("find the role definition!");
		}
		return role_body;
	}
	
	function getRoleBodyByRoleHeadAfterRoleChanging(role_head){
//		sys.debug("role_head " + JSON.stringify(role_head));
		var role_body = null;
//		sys.debug("number of pairs of heads and bodies: " + role_heads.length);
		for(var i = 0; i < role_heads.length; i++){
//			sys.debug(JSON.stringify(role_head) + "================" + JSON.stringify(role_heads[i]));
			if(isIdenticalRole(role_head, role_heads[i], 0)){
//				sys.debug("find identical roles");
				updateVariableValueInNode(role_head, role_heads[i]);
				role_body = role_bodies[i];
				break;
			}
		}
		if(role_body == null){
			throw roleDefinitionNotFoundException(JSON.stringify(role_head));
		}
		else{
//			sys.debug("find the role definition!");
		}
		return role_body;
	}
	
	function getRoleNameByRoleHeadNode(role_head){
		return role_head.children[0].children[0].toString();
	}
	
	function retrieveOKCs(okcs, count, length, node){
	 	var url_obj = url.parse(okcs[count]);
		var options = {
			host: url_obj.hostname,
			port: url_obj.port,
			path: url_obj.pathname,
			method: "GET"
		};
		sys.debug(JSON.stringify(options));
		var request = http.request(options, function(res) {
//			res.setEncoding("utf8");
			res.on("data", function(chunk){
//				sys.debug(chunk);
				eval.call(null, chunk.toString());
				sys.debug("OKC [" + okcs[count] + "] loaded!");
				count++;
				if(count == length){
					sys.debug("OKCs loading finished!");
//					sys.debug(JSON.stringify(node));
					emitter.emit("okcs loaded", node);
				}
				else{
					retrieveOKCs(okcs, count, length, node);
				}
			}).on("end", function(){
				sys.debug("okc loaded");
			});
		}).on("error", function(e) {
			sys.debug("okc loading error: " + e.message);
		}).end();
	}
	
	function initialize(clauses, builtIns){
		test_begin = (new Date()).getTime();
		init = new Array();
		okcs = new Array();
		niob_counter = 1;
		execute(builtIns);
		var j = new xmpp.JID(process.argv[3]);
		j.resource = xmpp_resource;
		peerFullID =  j.toString();
		peerPassword = process.argv[4];
		sys.debug(peerFullID);
//		sys.debug(JSON.stringify({jid : peerFullID, password : peerPassword, host : j.domain, port : 5222}));
		client = new xmpp.Client({jid : peerFullID, password : peerPassword});
		client.on("online", function(){
//			sys.debug(new xmpp.Element("presence", { to : "test" }).c("priority"));
			client.send(new xmpp.Element("presence", { from : peerFullID }).c("priority").t("1"));
			sys.debug("Connected to the XMPP server!");
//			sys.debug("Start interpreting the codes");
			emitter.on("okcs loaded", execute);
//			sys.debug(init[0].jid.toString());
			for(var i = 0; i < init.length; i++){
//				if(init[i].iid){
//					xmpp_resource = init[i].iid.toString();
//					sys.debug("Interaction ID is " + xmpp_resource);
//				}
				if(init[i].okcs){
					for(var j = 0; j < init[i].okcs.length; j++){
						okcs.push(init[i].okcs[j]);
//						sys.debug(init[i].okcs[j]);
					}
				}
			}
			var count = 0;
			var length = okcs.length;
//			sys.debug("length: " + JSON.stringify(okcs));
			retrieveOKCs(okcs, count, length, clauses);
		});
		client.on("stanza", function(stanza) {
//			sys.debug("get stanza :" + stanza);
//			sys.debug("to: " + stanza.attrs.to);
//			sys.debug("from: " + stanza.attrs.from);
  			if (stanza.is("message") && stanza.attrs.type && 
  				stanza.attrs.type == "chat" && stanza.attrs.from.indexOf("/") != -1 &&
  				(new xmpp.JID(stanza.attrs.from)).resource == xmpp_resource) {
  				if(stanza.attrs.to == peerFullID){
	  				var body = stanza.getChildren("body")[0].getText();
					emitter.emit("gotMessageFromXMPPServer", {"from" : stanza.attrs.from, "body" : body});
  				}
  			}
        });
		client.on("error", function(e){
			sys.debug(e);
			process.exit(1);
		});
	}
	
/* 	is not needed on the server side

	function initializeByHeader(jsonStr, clauses, builtIns){
		niob_counter = 1;
//		sys.debug("Start interpreting the codes");
		emitter.on("okcs loaded", execute);
//		sys.debug("node " + JSON.stringify(clauses, null, "\t"));
		init = eval('(' + jsonStr + ')');
//		sys.debug(init[0].jid.toString());
		for(var i = 0; i < init.length; i++){
			if(init[i].iid){
				xmpp_resource = init[i].iid.toString();
				sys.debug("Interaction ID is " + xmpp_resource);
			}
			for(var j = 0; j < init[i].okcs.length; j++){
				okcs.push(init[i].okcs[j]);
//				sys.debug(init[i].okcs[j]);
			}
		}
		if(arguments.length == 3){
			execute(builtIns);
		}
		var count = 0;
		var length = okcs.length;
		retrieveOKCs(okcs, count, length, clauses);
	}
*/
	
//	function sendtext(){
//		var fullJID = 
//		client.send(new xmpp.Element("message", {to : "bob@okbook.inf.ed.ac.uk", type : "chat"}).c("body").t("send"));
//		setTimeout('sendtext();', 3000);
//	}
	
	function sendMSG(message, recepientJID){
		var success;
		var j = new xmpp.JID(recepientJID);
		j.resource = xmpp_resource;
		var recepientFullID = j.toString();
		sys.debug("Sending message " + message + " from " + peerFullID + " to " + recepientFullID);
//		sys.debug("to: " + recepientFullID);
		client.send(new xmpp.Element("message", {from : peerFullID, to : recepientFullID, type : "chat"}).c("body").t(message));
//		sendtext();
		success = true;
		return success;
	}
	
	function getLatestOfflineMessage(senderFullID, callback){
	
	}
	
	function updateVariableValueInJSON(src_msg, dest_msg){
		dest_msg.value = src_msg.value;
		setValue(dest_msg.name, dest_msg.value);
		if(dest_msg.params.length != 0 && dest_msg.params.length != 0){
			for(var i = 0; i < src_msg.params.length; i++){
				updateVariableValueInJSON(src_msg.params[i], dest_msg.params[i]);
			}
		}
	}
	
	function onMessageArrival(msg) {
		sys.debug("A new message came : " + msg.body); 
//		sys.debug(emitter.listeners("gotMessageFromXMPPServer").length);
		var senderJID = msg.from.toString();
		//TODO the sender id and the resource need to be checked here.
		var msgBody = JSON.parse(msg.body);
//		sys.debug("body : " + JSON.stringify(msgBody));
//update variables here
		//when receive message
		if(currentConstraintsNode != undefined){
			emitter.emit("msgReceived", msgBody, execute(currentMessageNode), execute(currentRoleNode), currentConstraintsNode);
			emitter.removeAllListeners("msgReceived");
		}
		else{
			emitter.emit("msgReceived", msgBody, execute(currentMessageNode), execute(currentRoleNode));
			emitter.removeAllListeners("msgReceived");
		}
	}
	
	function executeNextThenOrOrBranch(solved){
//		sys.puts("here: " + emitter.listeners("nextThenDEF").length);
//		sys.puts("next then node: " + nextThenNode);
		if(solved){
//			sys.debug("next then def: " + emitter.listeners("nextThenDEF"));
			if(emitter.listeners("nextThenDEF") != undefined && emitter.listeners("nextThenDEF").length != 0){
				sys.debug("nextThenDEF is not empty! --- " + emitter.listeners("nextThenDEF").length);
				emitter.emit("nextThenDEF", nextThenNode, "nextThenDEF");
			}
			else{
				if(niob_counter == 0){
					sys.debug("Interaction finished successfully!");
					test_end = (new Date()).getTime();
					sys.debug("total running time: " + (test_end - test_begin) + " ms");
					process.exit(0);
				}
				else{
					niob_counter--;
					if(niob_counter == 0){
						sys.debug("Interaction finished successfully!");
						test_end = (new Date()).getTime();
						sys.debug("total running time: " + (test_end - test_begin) + " ms");
						process.exit(0);	
					}
				}
			}
		}
		else{
			if(emitter.listeners("nextOrDEF") != undefined && emitter.listeners("nextOrDEF").length != 0){
					v_names = backtrack.v_names;
					v_values = backtrack.v_values;
//					sys.debug("track back after OR");
					emitter.emit("nextOrDEF", nextOrNode, "nextOrDEF");
			}
			else{
				throw constraitsSolvingFailedException();
			}
		}
	}
	
	function receiveMSG(msgBody, msgJSONStr, roleNode, currentConstraintsNode){
		msgJSON = eval("(" + msgJSONStr + ")");
		updateVariableValueInJSON(msgBody, msgJSON);
//		sys.debug("after update: " + JSON.stringify(msgBody) + "============" + JSON.stringify(msgJSON));
		if(arguments[3]){
			var solved = execute(currentConstraintsNode);
			currentConstraintsNode = undefined;
			executeNextThenOrOrBranch(solved);
		}
		else{
			executeNextThenOrOrBranch(true);
		}
	}
	
	
	
	function execute(node, removeListeners){
//		sys.debug("read string: " + read_string_exec);
		if(read_string_exec){
			process.nextTick(function(){try{execute(node, removeListeners);}catch(e){};},1000);
			throw "Wait";
		}	
		if(arguments.length == 2){
			if(removeListeners == "nextThenDEF"){
				emitter.removeAllListeners("nextThenDEF");
//				sys.debug("after remove we got : " + emitter.listeners("nextThenDEF"));	
			}
			else if(removeListeners == "nextOrDEF"){
				emitter.removeAllListeners("nextOrDEF");
//				sys.debug("after remove we got : " + emitter.listeners("nextOrDEF"));	
			}
		}
//		sys.debug("executing " + JSON.stringify(node));
		var ret = 0;
		if(!node)
			return 0;
		switch(node.type){
			case NODE_OP: 
				switch(node.value){
					case OP_ENTRY:
						if(node.children[0]){
//							sys.debug(JSON.stringify(clauses));
							execute(getRoleBodyByRoleHeadAfterRoleChanging(node.children[0]));
						}
						break;
					case OP_NONE:
						if(node.children[0]){
							execute(node.children[0]);
						}
						break;
					case OP_CLAUSE:
						if(node.children[0]){
//							clauses.push(node.children[0]);
							execute(node.children[0]);
						}
						if(node.children[1]){
							execute(node.children[1]);
						}
						break;
					case OP_HEADBODY:
						if(node.children[0]){
							role_heads.push(node.children[0]);
//							execute(node.children[0]);

						}
						if(node.children[1]){
							role_bodies.push(node.children[1]);
//							execute(node.children[1]);
						}
						break;
					case OP_ROLE_CHANGE:
						if(node.children[1]){
							if(execute(node.children[1]) && node.children[1]){
								sys.debug("Role change now!");
								execute(getRoleBodyByRoleHeadAfterRoleChanging(node.children[0]));
							}
							else{
								throw constraitsSolvingFailedException();
							}
						}
						else if(node.children[0]){
							sys.debug("Role change now!");
							execute(getRoleBodyByRoleHeadAfterRoleChanging(node.children[0]));						
						}
						break;
					case OP_ROLE:
						var roleIdNode = execute(node.children[1]);
//						sys.debug("role parse: " + JSON.stringify(execute(node.children[0])));
						var temp = eval("[(" + execute(node.children[0]) + ")]");

/* read values from user input asynchronisely.
						readValueAsync(temp, function(){
							var roleType = temp[0];
							var roleName = roleType.name;
							for(var i = 0; i < init.length; i++){
	//							sys.debug(roleName.toString().toLowerCase() + " : " + init[i].role.toString().toLowerCase());
								if(roleName.toString().toLowerCase() == init[i].role.toString().toLowerCase()){
									setValue(roleIdNode, init[i].jid.toString());
	//								sys.debug(roleIdNode + " " + init[i].jid.toString());
									var jid = init[i].jid.toString();
									ret = jid; 
								}
							}
							sys.debug("after prompt");
						});
*/
						readValue(temp);
						var roleType = temp[0];
						var roleName = roleType.name;
						for(var i = 0; i < init.length; i++){
//							sys.debug(roleName.toString().toLowerCase() + " : " + init[i].role.toString().toLowerCase());
							if(roleName.toString().toLowerCase() == init[i].role.toString().toLowerCase()){
								setValue(roleIdNode, init[i].jid.toString());
//								sys.debug(roleIdNode + " " + init[i].jid.toString());
								var jid = init[i].jid.toString();
								ret = jid; 
							}
						}
						//possibly read in values inside temp here.
//						sys.debug("after prompt");
   						break;
					case OP_KNOWS:
						if(node.children[0])
							okcs.push(node.children[0].toString());
						break;
					case OP_PLAYS:
						if(node.children[0] && node.children[1]){
							var info = {};
							info["jid"] = node.children[0].toString();
							info["role"] = node.children[1].toString();
							init.push(info);	
						}
						break;
					case OP_IID:
						if(node.children[0])
							xmpp_resource = node.children[0].toString();
						break;
					case OP_ROLE_TYPE:
						var ret = execute(node.children[0]);
						break;
					case OP_TERMS:
						if(node.children[1]){
							ret = execute(node.children[0]) + ", " + execute(node.children[1]);
						}
						else{
							ret = execute(node.children[0]);
						}
						break;
					case OP_FACTOR:
						if(node.children[1])
							ret = '{ "name" : "' + node.children[0] + '", "value" : "' + getValue(node.children[0]) + '", "params" : [' + execute(node.children[1]) + ']}';
						else
							ret = '{ "name" : "' + node.children[0] + '", "value" : "' + getValue(node.children[0]) + '", "params" : []}';
						break;
					case OP_CONSTRAINT://TODO need check the Variables and which of them are inputs and wich of them are outputs (callback?).
						var constraintName = node.children[0];
						if(node.children[1]){
//						sys.debug(execute(node.children[1]));
				//		sys.debug(eval("JSON.parse(\"" + execute(node.children[1]) + "\");"));

/*  read value from user input asynchronisely.
						eval(constraintName + "_okc_hook" + "(eval(\'([\' + \'" + execute(node.children[1]) + "\' + \'])\'), peerHelper, function(satisfied){" +
						"	ret = satisfied;" +
						"	if(ret == null || ret == undefined || ret == false)" +
						"		throw invalidOKCException(funcName);" +
						"})"); //according to "Conventions over configurations"
*/

							ret = eval(constraintName + "_okc_hook" + "(eval(\'([\' + \'" + execute(node.children[1]) + "\' + \'])\'), peerHelper, sys)"); //according to "Conventions over configurations"
						}
						else{
							ret = eval(constraintName + "_okc_hook" + "(eval(\'([\' + \'])\'), peerHelper);");
						}
						if(ret == null || ret == undefined || ret == false)
							throw invalidOKCException(funcName);
						break;
					case OP_NEGATE:
						ret = !execute(node.children[0]);	
						break;
					case OP_LOGAND:
						ret = execute(node.children[0]) && execute(node.children[1]);
						break;
					case OP_LOGOR:
						backtrack = {};
						backtrack.v_names = v_names;
						backtrack.v_values = v_values;
						if(execute(node.children[0])){
							ret = ture;
						}
						else{
//							sys.debug("trackback after ||");
							v_names = backtrack.v_names;
							v_values = backtrack.v_values;
							ret = execute(node.children[1]);
						}
						break;
					case OP_LIST:
	//					sys.debug("hit list");
						var list = execute(node.children[0], niob_context);
						var listHead = execute(node.children[1], niob_context);
						var listTail = execute(node.children[2], niob_context);
						if(listHead != undefined && listTail != undefined && listTail.length){
							setValue(node.children[0].value.toString(), listTail.unshift(listHead));
						}
						else if(list != undefined && list.length){
							if(list.length == 0){
								setValue(node.children[1].value.toString(), new Array());
								setValue(node.children[2].value.toString(), new Array());
							}
							else{
								setValue(node.children[1].value.toString(), list[0]);
								list.shift();
								setValue(node.children[2].value.toString(), list);
							}
							ret = true;
						}	
						else{
							throw listDefinitionNotSupportedException();
						}					
						break;
					case OP_THEN:
						sys.debug("hit 'then'");
						emitter.removeAllListeners("nextThenDEF");
//						sys.debug("after remove we got : " + emitter.listeners("nextThenDEF"));
						nextThenNode = node.children[1];
//						thens.unshift(nextThenNode);
						emitter.on("nextThenDEF", execute);
//						sys.debug("the next then will be: " +JSON.stringify(nextThenNode) + "  : nextThenDefLength: " + emitter.listeners("nextThenDEF").length);
						execute(node.children[0]);
						break;
					case OP_OR:
//						sys.debug("hit 'or'");
						emitter.removeAllListeners("nextOrDEF");
//						sys.debug("after remove we got : " + emitter.listeners("nextThenDEF"));
						nextOrNode = node.children[1];
						emitter.on("nextOrDEF", execute);
						backtrack = {};
						backtrack.v_names = v_names;
						backtrack.v_values = v_values;
						execute(node.children[0]);
						break;
					case OP_NIOB:
						niob_counter++;
//						sys.debug("niob counter: " + niob_counter);
						sys.debug("hit 'niob'");
						execute(node.children[0]);
						execute(node.children[1]);
						break;
/*					case OP_PAR:
						
						break;
*/						
					case OP_SEND:
//						sys.debug("message : " + JSON.stringify(node.children[0]));
//						sys.debug("receipient : " + execute(node.children[1]));
						var msgNode = node.children[0];
						var roleNode = node.children[1];
						var solved = true;
						var message = execute(msgNode);
						var recepientJID = execute(roleNode);
						if(node.children[2]){
//							sys.debug(sys.inspect(node.children[2]));
							solved = execute(node.children[2]);
//							sys.debug("solved : " + solved);
							if(solved){
								sendMSG(message, recepientJID);
								sys.debug("Message sent!");
							}
							executeNextThenOrOrBranch(solved);
						}
						else{
							sendMSG(message, recepientJID);
							sys.debug("Message sent!");
//							sys.debug("next then DEF: " + emitter.listeners("nextThenDEF"));
							executeNextThenOrOrBranch(true);
						}
						break;
					case OP_RECEIVE: 
						emitter.removeAllListeners("receive");
						currentMessageNode = node.children[0];
						currentRoleNode = node.children[1];
						if(node.children[2]){
							currentConstraintsNode = node.children[2];
						}
						else{
							currentConstriantsNode = null;
						}
						emitter.on("msgReceived", receiveMSG);
						sys.debug("Start waiting for a new message");
						client.send(new xmpp.Element("presence", { from : peerFullID }).c("status").t("Available").up().c("priority").t("1"));	// retrieve offline message does not work this way
						break;
					case OP_MESSAGE:
						ret = '{ "name" : "' + node.children[0] + '", "value" : "' + getValue(node.children[0]) + '", "params" : [' + execute(node.children[1]) + ']}';
//						sys.debug("return message : " + ret);
						break;
					case OP_NO_MSG:
						sys.debug("hit 'no msg'");
						ret = execute(node.children[0]);
						sys.debug("ret:" + ret);
						executeNextThenOrOrBranch(ret);
						break;
					case OP_EQU:
						ret = execute(node.children[0], niob_context) == execute(node.children[1], niob_context);
						break;
					case OP_NEQ:
						ret = execute(node.children[0], niob_context) != execute(node.children[1], niob_context);
						break;
					case OP_GRT:
						ret = execute(node.children[0], niob_context) > execute(node.children[1], niob_context);
						break;
					case OP_LOT:
						ret = execute(node.children[0], niob_context) < execute(node.children[1], niob_context);
						break;
					case OP_GRE:
						ret = execute(node.children[0], niob_context) >= execute(node.children[1], niob_context);
						break;
					case OP_LOE:
						ret = execute(node.children[0], niob_context) <= execute(node.children[1], niob_context);
						break;					
					case OP_ASSIGN:
						setValue(node.children[0].value.toString(), execute(node.children[1], niob_context));
						ret = true;
						break;						
				}
				break;
			case NODE_VAR:
				if(getValue(node.value))
					ret = getValue(node.value);
				else
					ret = node.value;
				break;
			case NODE_CONST:
				ret = node.value;
				break;
			case NODE_ARR:
				ret = eval(node.value);
				break;
		}
		return ret;
	}
	
	function invalidOKCException(okcName){
		 sys.debug("ERROR: OKC " + "'" + okcName + "()' has not been loaded."); 
		 process.exit(1);
	}
	
	function roleDefinitionNotFoundException(roleName){
		sys.debug("ERROR: Role " + "'" + roleName + "' has not been defined in this interaction model.");
		process.exit(1);
	}
	
	function constraitsSolvingFailedException(){
		sys.debug("ERROR: Constraints can not be solved. Interaction terminated without completion!");
		process.exit(1);
	}

	
*]

/~ Lightweight Coordination Calculus (LCC) Interpreter ~/

/~ Tokens to be ignored ~/
!	' |\r|\n|\t|//[^\n]*\n'
        ;						

/~ Grammar tokens ~/
	'head'
	'a'
/~	'okc' ~/
	'or'
	'then'
	'niob'
/~  'par' ~/
	'knows'
	'plays'
	'iid'
	'list'
	'null'
	'not'									/~ logical "NOT" ~/
/~	'msg' ~/
/~	'text' ~/
/~	'input' ~/
/~	'initiakl' ~/
	'::'
	','
	'\.'
	'\('
	'\)'
	'\['
	'\]'
	'\{'
	'\}'
	'=='
	'!='
	'>'
	'<'
	'>='
	'=<'
	'=>'
	'<='
	'->'
	'<-'
	'='
	'_'
	'\|'                             
	'([A-Z][A-Za-z0-9_]*)'	Variable
	'(([\'\"])?[a-z][A-Za-z0-9_@\.://]*([\'\"])?)|(([\'\"])?([0-9])+([\'\"])?)'		Constant
	'\[[^\|]*\{[^\|]+\}[^\|]*\]'				JSONLIST
	'\[[^\{\}><=!]*\]'								LIST 
	;
	
	
/~ associativity ~/
< 	"niob"
	;
	
<	"or"							
	;

<	"then"
	;


<   "<="
    "=>"
    ;

<   "<-"
    "->"
    ;

<	"\|\|"									/~ logical "OR" ~/
	;
	
<	"&&"									/~ logical "AND" ~/
	;	
##

IM:		Clause_List	BuiltIn_List						[* initialize(%1, %2); *]
		| BuiltIn_List Clause_List						[* initialize(%2, %1); *]
		| head '(' JSONLIST ')' '.' Clause_List 			[* initializeByHeader(%3, %6); *]
		| Clause_List HEAD '(' JSONLIST ')' '.'				[* initializeByHeader(%4, %1); *]
		| head '(' JSONLIST ')' '.' Clause_List BuiltIn_List			[* initializeByHeader(%3, %6, %7); *]
		| head '(' JSONLIST ')' '.' BuiltIn_List Clause_List 			[* initializeByHeader(%3, %7, %6); *]
		;

Clause_List:	Clause									[* %% = createNode(NODE_OP, OP_CLAUSE, %1); *]
                | Clause Clause_List					[* %% = createNode(NODE_OP, OP_CLAUSE, %1, %2); *]
	        ;

Clause:	Role '::' Def '.'								[* %% = createNode(NODE_OP, OP_HEADBODY, %1, %3); *]		
		| Role '.'										[* %% = createNode(NODE_OP, OP_ENTRY, %1); *]
		;	
		
BuiltIn_List: 	BuiltIn									[* %% = createNode(NODE_OP, OP_CLAUSE, %1); *]
				| BuiltIn BuiltIn_List					[* %% = createNode(NODE_OP, OP_CLAUSE, %1, %2); *]
				;
		
BuiltIn:	plays '(' Constant ',' Constant ')'	'.'						[* %% = createNode(NODE_OP, OP_PLAYS, %3, %5); *]
		 	| knows '(' Constant ')' '.'								[* %% = createNode(NODE_OP, OP_KNOWS, %3); *] 
		 	| iid '(' Constant ')' '.'									[* %% = createNode(NODE_OP, OP_IID, %3); *]
		 	;

Role:	a '(' Type ',' Id ')'                           [* %% = createNode(NODE_OP, OP_ROLE, %3, %5); *]
		;

Type:	Term                                                [* %% = createNode(NODE_OP, OP_ROLE_TYPE, %1); *]
		;
	
Def:	Interaction												  /~ [* %% = %1; *] ~/
		| Def then Def                                            [* %% = createNode(NODE_OP, OP_THEN, %1, %3); *]
		| Def or Def                                              [* %% = createNode(NODE_OP, OP_OR, %1, %3); *]
		| Def niob Def											  [* %% = createNode(NODE_OP, OP_NIOB, %1, %3); *]
		| '{' Def '}'											  [* %% = %2; *]
/~		| Def par Def                                             [* %% = createNode(NODE_OP, OP_PAR, %1, %3); *] ~/
		;

Interaction:	Message '=>' Role                                 [* %% = createNode(NODE_OP, OP_SEND, %1, %3); *]
				| Message '=>' Role '<-' Constraint               [* %% = createNode(NODE_OP, OP_SEND, %1, %3, %5); *]
				| Message '<=' Role                               [* %% = createNode(NODE_OP, OP_RECEIVE, %1, %3); *]
				| Constraint '<-' Message '<=' Role               [* %% = createNode(NODE_OP, OP_RECEIVE, %3, %5, %1); *]
				| null '<-' Constraint                            [* %% = createNode(NODE_OP, OP_NO_MSG, %3); *]   /~ not in the original BNF declaration on the openk website ~/
				| Role											  [* %% = createNode(NODE_OP, OP_ROLE_CHANGE, %1 );*]
	      		| Role '<-' Constraint							  [* %% = createNode(NODE_OP, OP_ROLE_CHANGE, %1, %3) *]			
				;

Constraint:	Constant  											[* %% = true; *]
			| Constant '(' ')'                            		[* %% = createNode(NODE_OP, OP_CONSTRAINT, %1); *]
			| Constant '(' Terms ')'                            [* %% = createNode(NODE_OP, OP_CONSTRAINT, %1, %3); *]
			| not '(' Constraint ')'                            [* %% = createNode(NODE_OP, OP_NEGATE, %3); *]
			| Id '==' Id										[* %% = createNode(NODE_OP, OP_EQU, %1, %3); *]
			| Id '!=' Id										[* %% = createNode(NODE_OP, OP_NEQ, %1, %3); *]
			| Id '>' Id											[* %% = createNode(NODE_OP, OP_GRT, %1, %3); *]
			| Id '<' Id											[* %% = createNode(NODE_OP, OP_LOT, %1, %3); *]
			| Id '>=' Id										[* %% = createNode(NODE_OP, OP_GRE, %1, %3); *]
			| Id '=<' Id										[* %% = createNode(NODE_OP, OP_LOE, %1, %3); *]
			| Variable '=' Id									[* %% = createNode(NODE_OP, OP_ASSIGN, %1, %3); *]
			| Constraint '&&' Constraint                        [* %% = createNode(NODE_OP, OP_LOGAND, %1, %3); *]
			| Constraint '\|\|' Constraint                      [* %% = createNode(NODE_OP, OP_LOGOR, %1, %3); *] 
			| list '(' Id ',' Id ',' Id ')' 					[* %% = createNode(NODE_OP, OP_LIST, %3, %5, %7); *]
			;
	
Terms:	Terms ',' Term                                          [* %% = createNode(NODE_OP, OP_TERMS, %1, %3); *] 
		| Term                                                  [* %% = createNode(NODE_OP, OP_TERMS, %1); *] 
		;
		
Term:	Constant                                                [* %% = createNode(NODE_OP, OP_FACTOR, %1); *] 
		| Variable                                              [* %% = createNode(NODE_OP, OP_FACTOR, %1); *] 
		| LIST					 								[* %% = createNode(NODE_OP, OP_FACTOR, %1); *] 
		| Constant '(' Terms ')'                                [* %% = createNode(NODE_OP, OP_FACTOR, %1, %3)*]
		| '_'
		;

Id:	Constant                                                    [* %% = createNode(NODE_CONST, %1); *] 
	| Variable                                                  [* %% = createNode(NODE_VAR, %1); *] 
	| LIST														[* %% = createNode(NODE_ARR, %1); *] 
	;

Message:	Constant '(' Terms ')'                              [* %% = createNode(NODE_OP, OP_MESSAGE, %1, %3); *]
			;

[*
	if(process.argv.length == 5) {
		var str = require("fs").readFileSync( process.argv[2] ).toString("utf-8");
		var error_cnt = 0;
		var error_off = new Array();
		var error_la = new Array();
	
		if((error_cnt = __##PREFIX##parse(str, error_off, error_la)) > 0) {
		    var i;
			for( i = 0; i < error_cnt; i++ ) {
				console.log( "Parse error near >" + str.substr( error_off[i], 30 ) + "<, expecting \"" + error_la[i].join() + "\"" );
			}
			process.exit(1);
		}
	}
	else {
		console.log("Usage: node xlcc.js <IM_NAME.xlc> <JID> <PASSWORD>");
		process.exit(1);
	}
*]					